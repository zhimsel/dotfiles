[user]
  email = zach@himsel.net
  name = Zach Himsel
  signingkey = CA5B6466CFA962A5
[github]
  user = zhimsel
[core]
  eol = lf
  autocrlf = input
  safecrlf = false
  excludesfile = ~/.gitignore_global
  commentchar = "%"
[commit]
  verbose = 1
  gpgsign = true
[merge]
  tool = vimdiff
  conflictstyle = diff3
[push]
  default = upstream
[pager]
  last = cat
  branch = cat
[grep]
  linenumber = true
  patternType = extended
[tig]
  line-graphics = utf-8
  mouse = true
  main-view-id = true
[pretty]
  log = format:%C(auto)%h %Creset%ai %Cblue%an %Creset%C(auto)%s%d
[alias]
  unstage = reset HEAD --
  last = log -1 HEAD
  s = status
  f = fetch -p
  c = commit
  co = checkout
  a = add
  br = branch
  rb = rebase
  whoops = reset --soft HEAD~1  # "undo last commit, leaving changes staged"
  sub = submodule
  subf = submodule update --init --recursive --remote
  db = "!git diff $(git merge-base master HEAD) HEAD" # what's changed in our branch?
  dm = "!git diff $(git merge-base master HEAD) master" # what's changed in master since we branched?
  lr = log --graph --decorate --abbrev-commit --pretty=log HEAD~1..origin # unpulled commits on remote
  ll = log --graph --decorate --pretty=medium --all #better longer log
  l = log --graph --decorate --abbrev-commit --all --pretty=log # better log
  d = diff
  dc = diff --cached
  wt = worktree
  wtp = worktree prune -v
  wtl = worktree list
  st = stash
  pr = "!hub pull-request -o"
  bgo = "!hub browse -- compare/$(git symbolic-ref --short HEAD)"  # open branch on Github in browser
  bc = "!hub browse -u -- compare/$(git symbolic-ref --short HEAD) | pbcopy "  # copy branch URL to clipboard
  cgo = "!hub browse -- commit/$(git rev-parse HEAD)"  # open commit on Github in browser
  cc = "!hub browse -u -- commit/$(git rev-parse HEAD) | pbcopy"  # copy Github commit link to clipboard
  pbr = push -u origin HEAD
  brm = "!f() { if [ -z $1 ]; then echo 'Please supply a branch name'; else git branch $1 && git reset --hard $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)) && git checkout $1; fi }; f"
  rbm = "!git rebase -i $(git merge-base --fork-point master)"
  pmb = "!git branch --merged | grep -v '^\\*\\|master\\|dev' | xargs -n1 git branch -d"  # prune merged branches
