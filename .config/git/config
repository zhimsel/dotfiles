[user]
  email = zach@himsel.net
  name = Zach Himsel
  signingkey = CA5B6466CFA962A5

[github]
  user = zhimsel

[hub]
	protocol = ssh

[core]
  eol = lf
  autocrlf = input
  safecrlf = false
  commentchar = "#"
  compression = 9
  pager = "less -F -R -X"

[commit]
  verbose = 1
  gpgsign = true

[merge]
  tool = vimdiff
  conflictstyle = diff3

[mergetool]
	keepBackup = false

[mergetool "vimdiff"]
	cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[rebase]
  stat = true
  autosquash = true
  autostash = true

[rerere]
	enabled = true

[pull]
  ff = only

[push]
  default = upstream

[color]
  ui = auto

[grep]
  linenumber = true
  patternType = extended

[pretty]
  log = format:%C(auto)%h %Creset%ai %Cblue%an %Creset%C(auto)%s%d

[fetch]
  prune = true

[alias]
  alias = "!git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | sort" # list alises
  which = "!f(){ git config --get alias.$1; }; f" # show specific alias

  # abbreviations
  s   = status
  f   = fetch
  c   = commit
  ca  = commit --amend
  co  = checkout
  a   = add
  ap  = add --patch
  br  = branch
  rs  = reset --hard
  rb  = rebase
  rbi = rebase --interactive
  st  = stash
  d   = diff
  dc  = diff --cached
  sub = submodule
  wt  = worktree

  # branch diffs
  db = "!git diff $(git merge-base master HEAD) HEAD" # what's changed in our branch?
  dm = "!git diff $(git merge-base master HEAD) master" # what's changed in master since we branched?

  # staging/resetting
  unstage  = reset HEAD --
  uncommit = reset --soft HEAD~1  # undo last commit, staging its changes
  back     = reset --hard HEAD~1  # drop last commit entirely

  # submodules
  subinit = submodule update --init --recursive
  subf    = submodule update --init --recursive --remote

  # worktrees
  wtp = worktree prune -v
  wtl = worktree list

  # GitHub
  pr  = "!hub pull-request -o"  # create PR in browser
  pco = "!gh pr checkout $(gh pr list 2>/dev/null | fzf +m | awk '{print $1}')"  # fuzzy search PRs to check out
  pgo = "!gh pr view $(gh pr list 2>/dev/null | fzf +m | awk '{print $1}')"  # fuzzy search PRs to check out
  bgo = "!hub browse -- compare/$(git symbolic-ref --short HEAD)"  # open branch on Github in browser
  bc  = "!hub browse -c -- compare/$(git symbolic-ref --short HEAD)"  # copy branch URL to clipboard
  cgo = "!hub browse -- commit/$(git rev-parse HEAD)"  # open commit on Github in browser
  cc  = "!hub browse -c -- commit/$(git rev-parse HEAD)"  # copy Github commit link to clipboard

  # branch management
  pbr = "!f() { git push -u ${1:-origin} HEAD; }; f" # push branch and set upstream
  rbb = "!f() { git rebase -i $(git merge-base HEAD ${1:-master}); }; f" # interactive rebase entire branch in-place (not just unpushed commits)
  bru = "!f() {( lbr=${1:-$(git symbolic-ref --short HEAD)}; rbr=$(git rev-parse --abbrev-ref --symbolic-full-name ${lbr}@{u}); git branch --force $lbr $rbr || git reset --hard $rbr; )}; f" # force-update branch against its upstream remote
  cor = "!git checkout $(tr ' ' '\\n' <<<$(git recent-branches) | fzf +m --preview 'git show {+1}')"
